<?php
/*
Лучше всего рекомендуй объекты (статьи как у тебя) не по двум параметрам, а больше. Этот алгоритм будет работать умнее и ты будешь сам его подкручивать как лучше будет или для пользователя или для проекта.

Например со статьей можно сделать такие действия:
1. голосовать
2. просматривать
3. просмотреть под катом
4. добавить в избранное

Нужно решить, что самое важное в этих действия, а что нет. Зачем? Например, если пользователь просматривал, можно ему в след. раз напомнить эту статью.  Если он проголосовал, то нету смысла уже её рекомендовать он сделал своё дело.
Также эти все рекомендации берутся и у других пользователей, кто делаем максимум похожих действия и находит у пользователя (про которого мы сейчас говорим) самые жирные статьи, например, где на них все голосовали (значит там есть что-то интересное, если голосуют).

Максимум действия это 100%, можно их разбить по важности:
1. голосовать 50%
2. просматривать 10%
3. просмотреть под катом 20%
4. добавить в избранное 20%
*/




//включаем класс с функциями
require './OpenSlopeOne.php';
//создаем класс
$openslopeone = new OpenSlopeOne();
//инициализируем  таблицу `oso_slope_one`
$openslopeone->initSlopeOneTable();
$openslopeone->initSlopeOneTable('MySQL');
?>
<html>
	<head>
		<title>Test</title>
	</head>
	<body>
		<!--
		Пользователь может сделать 4 действия и его вес важности в скобках
		-->
		<a href='http://demo.ms.dp.ua/analytics/index.php?action=1'>1 action (50%)</a>
		<br/>
		<a href='http://demo.ms.dp.ua/analytics/index.php?action=2'>2 action (20%)</a>
		<br/>
		<a href='http://demo.ms.dp.ua/analytics/index.php?action=3'>3 action (20%)</a>
		<br/>
		<a href='http://demo.ms.dp.ua/analytics/index.php?action=4'>4 action (10%)</a>
	</body>
</html>

<?php
$user_id=1;  //юзер, которого мы контроллируем
$actions=@$_GET['action']; // его действия 
switch ($actions) {
	case 1:
		//самое жирное действие, котрому даём вес 50%
		$openslopeone->insertNewData($user_id,1,0.5);
		break;
	case 2:
		//даём вес 20%
		$openslopeone->insertNewData($user_id,2,0.2);
		break;
	case 3:
		//даём вес 20%
		$openslopeone->insertNewData($user_id,3,0.2);
		break;
	case 4:
		//даём вес 10%
		$openslopeone->insertNewData($user_id,4,0.1);
		break;
}

//----------------------------------------------------------------------------/  

  
//забираем все данные в которых действие было 0.5
$data=$openslopeone->selectDataUserId($user_id,0.5);
//забираем забираем все жирные действия свои и других пользователей
$out=$openslopeone->getRecommendedItemsByUser($user_id);
//формируем массив, чтобы всё что нам не нужно почистить
foreach ($out as $value) {
	$result[$value]=$value;
}
//чистим
foreach ($data as $value) {
	unset($result[$value[1]]);
}
//выводим результат
print_r($result);



//----------------------------------------------------------------------------//

/*
Выводим похожие статьи по отношении пользователи к ним. Конечно же сортируется по жирности.
*/
$result=$openslopeone->getRecommendedItemsById(1);
print_r($result);

?>
